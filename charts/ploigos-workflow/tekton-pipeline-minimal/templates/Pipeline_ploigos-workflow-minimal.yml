---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ include "ploigos-workflow-tekton.pipelineName" . | quote }}
  labels:
    ploigos.dev/workflow: minimal
    {{- include "ploigos-workflow.labels" . | nindent 4 }}
spec:
  workspaces:
  - name: home
    description: |
      Workspace for the container users home directory.
  - name: app
    description: |
      Workspace to checkout the application this workflow is for and set as the working directory
      for the step executions.
  {{- if $.Values.global.separatePlatformConfig }}
  - name: ploigos-platform-config
    description: |
      Workspace containing platform-level config
  - name: ploigos-platform-config-secrets
    description: |
      Workspace containing platform-level secrets
  {{- end }}
  params:
    - name: verbose
      description: Log any *sh commands used during execution.
      type: string
      default: "false"
    - name: appRepoUrl
      description: |
        URL to the application repository to run the pipeline for.
      type: string
    - name: appRepoRef
      description: |
        Git reference (tag, branch) of the application repository to run the pipeline for.
      type: string
    - name: appCloneSSLVerify
      description: |
        Passed to git-clone ClusterTask.
        Defines if http.sslVerify should be set to true or false in the global git config.
      type: string
      default: "true"
    - name: stepRunnerConfigDir
      description: |
        Path to the Step Runner configuration to pass to the
        Workflow Step Runner when running workflow steps.
      type: string
      default: ''
    - name: pgpKeysSecretName
      description: |
        Name of the Kubernetes Secret containing the PGP private keys to import for use by SOPS
        to decrypt encrypted Step Runner config.
      type: string
    - name: envNameDev
      type: string
      description: |
        Name of the "Development" environment used in the Step Runner configuration
        files and to pass to the Workflow Step Runner when running a step targeted to
        the "Development" environment.
      default: DEV
    - name: envNameTest
      type: string
      description: |
        Name of the "Test" environment used in the Step Runner configuration
        files and to pass to the Workflow Step Runner when running a step targeted to
        the "Test" environment.
      default: TEST
    - name: envNameProd
      type: string
      description: |
        Name of the "Production" environment used in the Step Runner configuration
        files and to pass to the Workflow Step Runner when running a step targeted to
        the "Production" environment.
      default: PROD
    - name: ciOnlyGitRefPatterns
      type: string
      description: |
        Regex pattern for git references that should only go through the
        Continuous Integration (CI) workflow.
      default: "^$"
    - name: devGitRefPatterns
      type: string
      description: |
        Regex pattern for git references that should go through the
        Continuous Integration (CI) workflow and then the deployment to
        "Development" environment(s) (IE: "DEV" environment) workflow.
      default: "^feature/.+$|^PR-.+$"
    - name: releaseGitRefPatterns
      type: string
      description: |
        Regex pattern for git references that should go through the
        Continuous Integration (CI) workflow and then the deployment to
        "Release" environment(s) (IE: "TEST" and then "PROD" environments) workflow.
      default: "^main$"
    - name: stepRunnerPackageName
      type: string
      description: |
        Name of the python package to use as the Workflow Step Runner.
      default: "ploigos-step-runner"
    - name: stepRunnerUpdateLibrary
      type: string
      description: |
        If 'true', then pull the Workflow Step Runner library source code and build it.
        If 'false', use the version of the Workflow Step Runner library that is pre-installed
        in the CI worker images.

        If 'false' then the following parameters are ignored:
          - 'stepRunnerLibSourceUrl'
          - 'stepRunnerLibIndexUrl'
          - 'stepRunnerLibExtraIndexUrl'
          - 'stepRunnerLibVersion'
      default: "false"
    - name: stepRunnerLibIndexUrl
      type: string
      description: |
        If 'stepRunnerUpdateLibrary' is true and 'stepRunnerLibSourceUrl' is not supplied then this
        will be passed to pip as '--index-url' for installing the Workflow Step Runner library
        and its dependencies.

        NOTE
        ----
        PIP is indeterminate whether it will pull packages from '--index-url' or
        '--extra-index-url', therefore be sure to specify 'stepRunnerLibVersion'
        if trying to pull a specific version from a specific index.

        SEE
        ---
        - https://pip.pypa.io/en/stable/reference/pip_install/#id48
      default: "https://pypi.org/simple/"
    - name: stepRunnerLibExtraIndexUrl
      type: string
      description: |
        If 'stepRunnerUpdateLibrary' is true and 'stepRunnerLibSourceUrl' is not supplied then this
        will be passed to pip as '--extra-index-url' for installing the Workflow Step Runner library
        and its dependencies.

        NOTE
        ----
        PIP is indeterminate whether it will pull packages from '--index-url' or
        '--extra-index-url', therefore be sure to specify 'stepRunnerLibVersion'
        if trying to pull a specific version from a specific index.

        SEE
        ---
        - https://pip.pypa.io/en/stable/reference/pip_install/#id48
      default: "https://pypi.org/simple/"
    - name: stepRunnerLibVersion
      type: string
      description: |
        If 'stepRunnerUpdateLibrary' is true and 'stepRunnerLibSourceUrl' is not supplied then this
        will be passed to pip as as the version of the Workflow Step Runner library to install.

        NOTE
        ----
        If not given pip will install the latest from either 'stepRunnerLibIndexUrl' or
        'stepRunnerLibExtraIndexUrl' indeterminately.
      default: ""
    - name: stepRunnerLibSourceUrl
      type: string
      description: |
        If none empty value given and 'stepRunnerUpdateLibrary' is true this will be used as the source
        location to install the Workflow Step Runner library from rather then from a PEP 503 compliant
        repository.

        If given then the following parameters are ignored:
          - 'stepRunnerLibIndexUrl'
          - 'stepRunnerLibExtraIndexUrl'
          - 'stepRunnerLibVersion'

        EXAMPLES
        --------
        git+https://github.com/ploigos/ploigos-step-runner.git@feature/NAPSSPO-1018
        installs from the public 'ploigos' fork from the 'feature/NAPSSPO-1018' branch.

        git+https://gitea.internal.example.xyz/tools/ploigos-step-runner.git@main
        installs from an internal fork of the step runner library from the 'main' branch.
      default: ""
    - name: workflowWorkersImagePullPolicy
      type: string
      description: |
        Policy for pulling new versions of the imageTag for the CI worker images
        when running this pipeline.
      default: IfNotPresent
    - name: workflowWorkerImageDefault
      type: string
      description: |
        Container image to use when creating a workflow worker
        to run pipeline steps when no other specific container image has been specified for that step.
      default: ploigos/ploigos-base:latest
    - name: workflowWorkerImageSourceClone
      type: string
      description: |
        Container image to use when creating a workflow worker
        to run pipeline steps when performing source clone step(s).
      default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.12.1
    - name: workflowWorkerImagePackage
      type: string
      description: |
        Container image to use when creating a workflow worker
        to run pipeline steps when performing package application step(s).
      default: ploigos/ploigos-tool-sonar:latest
    - name: workflowWorkerImagePushArtifacts
      type: string
      description: |
        Container image to use when creating a workflow worker
        to run pipeline steps when performing push push packaged artifacts step(s).
    - name: workflowWorkerImageContainerOperations
      type: string
      description: |
        Container image to use when creating a workflow worker
        to run pipeline steps when performing container operations (build/push/etc) step(s).
      default: ploigos/ploigos-tool-containers:latest
    - name: workflowWorkerImageDeploy
      type: string
      description: |
        Container image to use when creating a workflow worker
        to run pipeline steps when performing deploy step(s).
      default: ploigos/ploigos-tool-argocd:latest

  tasks:
  #########
  # SETUP #
  #########
  - name: setup-stage-gate
    taskRef:
      kind: ClusterTask
      name: pattern-matcher
    params:
    - name: verbose
      value: $(params.verbose)
    - name: input
      value: $(params.appRepoRef)
    - name: pattern
      value: "$(params.ciOnlyGitRefPatterns)|$(params.devGitRefPatterns)|$(params.releaseGitRefPatterns)"

  ####################
  # Setup: App Clone #
  ####################
  - name: setup-app-clone
    runAfter:
    - setup-stage-gate
    when:
    - input: "$(tasks.setup-stage-gate.results.matches)"
      operator: in
      values: ["true"]
    taskRef:
      kind: ClusterTask
      name: ploigos-git-clone
    workspaces:
    - name: output
      workspace: app
    params:
    - name: verbose
      value: $(params.verbose)
    - name: image
      value: $(params.workflowWorkerImageSourceClone)
    - name: imagePullPolicy
      value: $(params.workflowWorkersImagePullPolicy)
    - name: url
      value: $(params.appRepoUrl)
    - name: revision
      value: $(params.appRepoRef)
    - name: deleteExisting
      value: "true"
    - name: sslVerify
      value: $(params.appCloneSSLVerify)
    # NOTE: this is so that git wont end up in a detached head mode
    - name: refspec
      value: "+refs/heads/$(params.appRepoRef):$(params.appRepoRef)"

  #####################################
  # Setup: Setup Workflow Step Runner #
  #####################################
  - name: setup-workflow-step-runner
    runAfter:
    - setup-stage-gate
    # NOTE:
    #   This dependency is only here because of read/write once constraints of most PV/PVCs.
    #   If happening to be using storage that supports ReadWriteMany then the following steps
    #   can run in parallel.
    #   * setup-app-clone
    #   * setup-workflow-step-runner
    #   * setup-pgp-keys
    - setup-app-clone
    when:
    - input: "$(tasks.setup-stage-gate.results.matches)"
      operator: in
      values: ["true"]
    taskRef:
      kind: ClusterTask
      name: ploigos-setup-workflow-step-runner
    workspaces:
    - name: home
      workspace: home
    params:
    - name: verbose
      value: $(params.verbose)
    - name: image
      value: $(params.workflowWorkerImageDefault)
    - name: imagePullPolicy
      value: $(params.workflowWorkersImagePullPolicy)
    - name: stepRunnerPackageName
      value: $(params.stepRunnerPackageName)
    - name: stepRunnerUpdateLibrary
      value: $(params.stepRunnerUpdateLibrary)
    - name: stepRunnerLibSourceUrl
      value: $(params.stepRunnerLibSourceUrl)
    - name: stepRunnerLibIndexUrl
      value: $(params.stepRunnerLibIndexUrl)
    - name: stepRunnerLibExtraIndexUrl
      value: $(params.stepRunnerLibExtraIndexUrl)
    - name: stepRunnerLibVersion
      value: $(params.stepRunnerLibVersion)

  ###################
  # Setup: PGP Keys #
  ###################
  - name: setup-pgp-keys
    runAfter:
    - setup-stage-gate
    # NOTE:
    #   This dependency is only here because of read/write once constraints of most PV/PVCs.
    #   If happening to be using storage that supports ReadWriteMany then the following steps
    #   can run in parallel.
    #   * setup-app-clone
    #   * setup-workflow-step-runner
    #   * setup-pgp-keys
    - setup-workflow-step-runner
    when:
    - input: "$(tasks.setup-stage-gate.results.matches)"
      operator: in
      values: ["true"]
    taskRef:
      kind: ClusterTask
      name: import-pgp-keys
    workspaces:
    - name: home
      workspace: home
    params:
    - name: verbose
      value: $(params.verbose)
    - name: image
      value: $(params.workflowWorkerImageDefault)
    - name: imagePullPolicy
      value: $(params.workflowWorkersImagePullPolicy)
    - name: pgpKeysSecretName
      value: $(params.pgpKeysSecretName)

  ##########################
  # Continuous Integration #
  ##########################
  - name: ci-stage-gate
    runAfter:
    - setup-app-clone
    - setup-workflow-step-runner
    - setup-pgp-keys
    taskRef:
      kind: ClusterTask
      name: pattern-matcher
    params:
    - name: verbose
      value: $(params.verbose)
    - name: input
      value: $(params.appRepoRef)
    - name: pattern
      value: "$(params.ciOnlyGitRefPatterns)|$(params.devGitRefPatterns)|$(params.releaseGitRefPatterns)"

  #########################
  # CI: Generate Metadata #
  #########################
  - name: ci-generate-metadata
    runAfter:
    - ci-stage-gate
    when:
    - input: "$(tasks.ci-stage-gate.results.matches)"
      operator: in
      values: ["true"]
    taskRef:
      kind: ClusterTask
      name: ploigos-step-runner
    workspaces:
    - name: home
      workspace: home
    - name: app
      workspace: app
    {{- if $.Values.global.separatePlatformConfig }}
    - name: ploigos-platform-config
      workspace: ploigos-platform-config
    - name: ploigos-platform-config-secrets
      workspace: ploigos-platform-config-secrets
    {{- end }}
    params:
    - name: verbose
      value: $(params.verbose)
    - name: image
      value: $(params.workflowWorkerImageDefault)
    - name: imagePullPolicy
      value: $(params.workflowWorkersImagePullPolicy)
    - name: stepRunnerPackageName
      value: $(params.stepRunnerPackageName)
    - name: venvPath
      value: $(tasks.setup-workflow-step-runner.results.venvPath)
    - name: stepName
      value: generate-metadata
    - name: stepRunnerConfigDir
      value: $(params.stepRunnerConfigDir)

  ###########################
  # CI: Package Application #
  ###########################
  - name: ci-package-application
    runAfter:
    - ci-generate-metadata
    when:
    - input: "$(tasks.ci-stage-gate.results.matches)"
      operator: in
      values: ["true"]
    taskRef:
      kind: ClusterTask
      name: ploigos-step-runner
    workspaces:
    - name: home
      workspace: home
    - name: app
      workspace: app
    {{- if $.Values.global.separatePlatformConfig }}
    - name: ploigos-platform-config
      workspace: ploigos-platform-config
    - name: ploigos-platform-config-secrets
      workspace: ploigos-platform-config-secrets
    {{- end }}
    params:
    - name: verbose
      value: $(params.verbose)
    - name: image
      value: $(params.workflowWorkerImagePackage)
    - name: imagePullPolicy
      value: $(params.workflowWorkersImagePullPolicy)
    - name: stepRunnerPackageName
      value: $(params.stepRunnerPackageName)
    - name: venvPath
      value: $(tasks.setup-workflow-step-runner.results.venvPath)
    - name: stepName
      value: package
    - name: stepRunnerConfigDir
      value: $(params.stepRunnerConfigDir)

  ##############################
  # CI: Create Container Image #
  ##############################
  - name: ci-create-container-image
    runAfter:
    - ci-package-application
    when:
    - input: "$(tasks.ci-stage-gate.results.matches)"
      operator: in
      values: ["true"]
    taskRef:
      kind: ClusterTask
      name: ploigos-step-runner-container-build-capabilities
    workspaces:
    - name: home
      workspace: home
    - name: app
      workspace: app
    {{- if $.Values.global.separatePlatformConfig }}
    - name: ploigos-platform-config
      workspace: ploigos-platform-config
    - name: ploigos-platform-config-secrets
      workspace: ploigos-platform-config-secrets
    {{- end }}
    params:
    - name: verbose
      value: $(params.verbose)
    - name: image
      value: $(params.workflowWorkerImageContainerOperations)
    - name: imagePullPolicy
      value: $(params.workflowWorkersImagePullPolicy)
    - name: stepRunnerPackageName
      value: $(params.stepRunnerPackageName)
    - name: venvPath
      value: $(tasks.setup-workflow-step-runner.results.venvPath)
    - name: stepName
      value: create-container-image
    - name: stepRunnerConfigDir
      value: $(params.stepRunnerConfigDir)

  ##########################################
  # CI: Push Container Image to Repository #
  ##########################################
  - name: ci-push-container-image-to-repository
    runAfter:
    - ci-create-container-image
    when:
    - input: "$(tasks.ci-stage-gate.results.matches)"
      operator: in
      values: ["true"]
    taskRef:
      kind: ClusterTask
      name: ploigos-step-runner
    workspaces:
    - name: home
      workspace: home
    - name: app
      workspace: app
    {{- if $.Values.global.separatePlatformConfig }}
    - name: ploigos-platform-config
      workspace: ploigos-platform-config
    - name: ploigos-platform-config-secrets
      workspace: ploigos-platform-config-secrets
    {{- end }}
    params:
    - name: verbose
      value: $(params.verbose)
    - name: image
      value: $(params.workflowWorkerImageContainerOperations)
    - name: imagePullPolicy
      value: $(params.workflowWorkersImagePullPolicy)
    - name: stepRunnerPackageName
      value: $(params.stepRunnerPackageName)
    - name: venvPath
      value: $(tasks.setup-workflow-step-runner.results.venvPath)
    - name: stepName
      value: push-container-image
    - name: stepRunnerConfigDir
      value: $(params.stepRunnerConfigDir)

  #######
  # DEV #
  #######
  - name: dev-stage-gate
    runAfter:
    - ci-push-container-image-to-repository
    taskRef:
      kind: ClusterTask
      name: pattern-matcher
    params:
    - name: verbose
      value: $(params.verbose)
    - name: input
      value: $(params.appRepoRef)
    - name: pattern
      value: $(params.devGitRefPatterns)

  #####################################
  # DEV: Deploy or Update Environment #
  #####################################
  - name: dev-deploy-or-update-environment
    runAfter:
    - dev-stage-gate
    when:
    - input: "$(tasks.dev-stage-gate.results.matches)"
      operator: in
      values: ["true"]
    taskRef:
      kind: ClusterTask
      name: ploigos-step-runner
    workspaces:
    - name: home
      workspace: home
    - name: app
      workspace: app
    {{- if $.Values.global.separatePlatformConfig }}
    - name: ploigos-platform-config
      workspace: ploigos-platform-config
    - name: ploigos-platform-config-secrets
      workspace: ploigos-platform-config-secrets
    {{- end }}
    params:
    - name: verbose
      value: $(params.verbose)
    - name: image
      value: $(params.workflowWorkerImageDeploy)
    - name: imagePullPolicy
      value: $(params.workflowWorkersImagePullPolicy)
    - name: stepRunnerPackageName
      value: $(params.stepRunnerPackageName)
    - name: venvPath
      value: $(tasks.setup-workflow-step-runner.results.venvPath)
    - name: stepName
      value: deploy
    - name: stepRunnerConfigDir
      value: $(params.stepRunnerConfigDir)
    - name: environment
      value: $(params.envNameDev)

  ########
  # TEST #
  ########
  - name: test-stage-gate
    runAfter:
    # NOTE:
    #   We would prefer to say this runs after the DEV stage finishes....
    #   but....https://github.com/tektoncd/pipeline/issues/2127. Which means
    #   if the DEV stage is skipped then this stage will be skipped too because the
    #   dev-deploy-or-update-environment task was skipped so the runAfter makes it so this step
    #   would never run.
    - ci-push-container-image-to-repository
    #- dev-deploy-or-update-environment
    taskRef:
      kind: ClusterTask
      name: pattern-matcher
    params:
    - name: verbose
      value: $(params.verbose)
    - name: input
      value: $(params.appRepoRef)
    - name: pattern
      value: $(params.releaseGitRefPatterns)

  ######################################
  # TEST: Deploy or Update Environment #
  ######################################
  - name: test-deploy-or-update-environment
    runAfter:
    - test-stage-gate
    when:
    - input: "$(tasks.test-stage-gate.results.matches)"
      operator: in
      values: ["true"]
    taskRef:
      kind: ClusterTask
      name: ploigos-step-runner
    workspaces:
    - name: home
      workspace: home
    - name: app
      workspace: app
    {{- if $.Values.global.separatePlatformConfig }}
    - name: ploigos-platform-config
      workspace: ploigos-platform-config
    - name: ploigos-platform-config-secrets
      workspace: ploigos-platform-config-secrets
    {{- end }}
    params:
    - name: verbose
      value: $(params.verbose)
    - name: image
      value: $(params.workflowWorkerImageDeploy)
    - name: imagePullPolicy
      value: $(params.workflowWorkersImagePullPolicy)
    - name: stepRunnerPackageName
      value: $(params.stepRunnerPackageName)
    - name: venvPath
      value: $(tasks.setup-workflow-step-runner.results.venvPath)
    - name: stepName
      value: deploy
    - name: stepRunnerConfigDir
      value: $(params.stepRunnerConfigDir)
    - name: environment
      value: $(params.envNameTest)

  ########
  # PROD #
  ########
  - name: prod-stage-gate
    runAfter:
    - test-deploy-or-update-environment
    taskRef:
      kind: ClusterTask
      name: pattern-matcher
    params:
    - name: verbose
      value: $(params.verbose)
    - name: input
      value: $(params.appRepoRef)
    - name: pattern
      value: $(params.releaseGitRefPatterns)

  ######################################
  # PROD: Deploy or Update Environment #
  ######################################
  - name: prod-deploy-or-update-environment
    runAfter:
    - prod-stage-gate
    when:
    - input: "$(tasks.prod-stage-gate.results.matches)"
      operator: in
      values: ["true"]
    taskRef:
      kind: ClusterTask
      name: ploigos-step-runner
    workspaces:
    - name: home
      workspace: home
    - name: app
      workspace: app
    {{- if $.Values.global.separatePlatformConfig }}
    - name: ploigos-platform-config
      workspace: ploigos-platform-config
    - name: ploigos-platform-config-secrets
      workspace: ploigos-platform-config-secrets
    {{- end }}
    params:
    - name: verbose
      value: $(params.verbose)
    - name: image
      value: $(params.workflowWorkerImageDeploy)
    - name: imagePullPolicy
      value: $(params.workflowWorkersImagePullPolicy)
    - name: stepRunnerPackageName
      value: $(params.stepRunnerPackageName)
    - name: venvPath
      value: $(tasks.setup-workflow-step-runner.results.venvPath)
    - name: stepName
      value: deploy
    - name: stepRunnerConfigDir
      value: $(params.stepRunnerConfigDir)
    - name: environment
      value: $(params.envNameProd)

  finally:
  ##########
  # Report #
  ##########
  - name: report
    taskRef:
      kind: ClusterTask
      name: ploigos-step-runner
    workspaces:
    - name: home
      workspace: home
    - name: app
      workspace: app
    {{- if $.Values.global.separatePlatformConfig }}
    - name: ploigos-platform-config
      workspace: ploigos-platform-config
    - name: ploigos-platform-config-secrets
      workspace: ploigos-platform-config-secrets
    {{- end }}
    params:
    - name: verbose
      value: $(params.verbose)
    - name: image
      value: $(params.workflowWorkerImageDefault)
    - name: imagePullPolicy
      value: $(params.workflowWorkersImagePullPolicy)
    - name: stepRunnerPackageName
      value: $(params.stepRunnerPackageName)
    - name: venvPath
      value: $(tasks.setup-workflow-step-runner.results.venvPath)
    - name: stepName
      value: report
    - name: stepRunnerConfigDir
      value: $(params.stepRunnerConfigDir)
    - name: environment
      value: $(params.envNameProd)
